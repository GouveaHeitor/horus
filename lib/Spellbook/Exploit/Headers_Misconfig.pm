package Spellbook::Exploit::Headers_Misconfig {
    use strict;
    use warnings;
    use Try::Tiny;
    use Spellbook::Core::UserAgent;

    sub new {
        my ($self, $parameters) = @_;
        my ($help, $target, @results);

        Getopt::Long::GetOptionsFromArray (
            $parameters,
            "h|help"     => \$help,
            "t|target=s" => \$target
        );

        if ($target) {
            if ($target !~ /^http(?:s)?:\/\//x) {
                $target = "https://$target";
            }

            my $userAgent = Spellbook::Core::UserAgent -> new ();
            my $request   = $userAgent -> get($target);

            my @headers = (
                "x-frame-options",
                "x-content-type-options",
                "content-security-policy", # bypass CSP? maybe based on upload of third party sites like jspen or s3 bucket
                "strict-transport-security",
                "access-control-allow-origin"
            );

            foreach my $header (@headers) {
                if (!$request -> header($header)) {
                    push @results, "$target don't have $header header.";
                }
            }

            return @results;
        }

        if ($help) {
            return<<"EOT";

Exploit::Headers_Misconfig
=======================
-h, --help     See this menu
-t, --target   Define a target\n\n";

EOT
        }

        return 0;
    }
}

1;